# =============================================================================
# NautiPi Service YAML Template 
# =============================================================================

apiVersion: nautipi.io/v1                     # required – API version, fixed for all services/plugins
kind: Service                                 # required – Always "Service"

metadata:
  id: "<service-id>"                          # required – Unique, machine-readable identifier (no spaces/special chars)
  displayName: "<Service Name>"               # required – Shown in UI, max. 30 characters
  version: "1.0.0"                            # required – Semantic version (semver, e.g. 1.0.0)
  description: |                              # required – Short description, 1–3 lines
    <Short description of the service/plugin>
  author: "<Author or Project>"               # optional – Name or project (shown in UI, for credits)
  homepage: "<https://project.url>"           # optional – Project homepage or main website
  documentation: "<https://docs.url>"         # optional – Link to online docs/manual
  icon: "<icon.svg|/local/path|data:image/svg+xml;...>"        # optional – SVG icon (inline, file, or URL)
  license: "MIT"                              # optional – License (e.g. MIT, GPL-3.0)
  category: "<navigation|sensor|utility|media|system|custom>"  # optional – Category shown in UI

inputs:                                       # optional – User inputs required during installation/config
  - name: "DB_USER"                           # required – Variable name (used in injection and commands)
    label: "Database Username"                # required – Label shown in WebUI
    type: "string"                            # required – string, password, integer, boolean, select
    default: ""                               # optional – Default value
    description: "The username for the database service"  # optional – Help text
    validation: "^[a-zA-Z0-9_]+$"             # optional – Regex pattern for validation
  - name: "DB_PASSWORD"
    label: "Database Password"
    type: "password"
    default: ""
    description: "Database user password"

injection:                                    # optional – Rules to insert inputs into files/configs
  - input: "DB_USER"                          # name from inputs section
    target:
      type: "env_file"                        # env_file | docker_compose | yaml | json | replace_string
      file: "/opt/myservice/.env"             # path to file
      key: "DB_USER"                          # for env/yaml/json: the key to set
  - input: "DB_PASSWORD"
    target:
      type: "docker_compose"
      file: "/opt/myservice/docker-compose.yml"
      key_path: "services.db.environment.DB_PASSWORD"  # YAML key path
  - input: "DB_PASSWORD"
    target:
      type: "replace_string"
      file: "/opt/myservice/docker-compose.yml"
      search: "DB_PASSWORD_PLACEHOLDER"       # String to replace with user value

spec:

  lifecycle:                                  # required – All install/update/remove steps
    preInstall:
      commands:                               # optional – Commands/scripts to run before install
        - command: "<your-shell-command-here>"  # You can use ${DB_USER} here
          sudo: false                           # true if this command needs root privileges, else false
    install:
      commands:                               # required – List of shell commands or scripts to install the service
        - command: "echo 'User: ${DB_USER}'"    # Placeholder replaced at runtime
          sudo: true
        - command: "<install shell command 2>"
          sudo: false
    postInstall:
      commands:                               # optional – After install
        - command: "<post-install shell command>"
          sudo: false
    update:
      package_manager: "<apt|docker|docker-compose|npm|pip|custom>" # required – define the package manager for generic updates of all packages
      custom_commands:                        # required if custom – Update commands if custom method like git pulls
        - command: "<update shell command>"
          sudo: true
    uninstall:
      commands:                               # required – Uninstall/remove service
        - command: "<uninstall shell command>"
          sudo: true
    checkInstall:
      command: "<which binary || test -f ...>"  # required – Command to check if install succeeded (returns 0 if installed)
      sudo: false                                # Set true if check command needs root

  service:                                                      # required – How the service is managed/run (start/stop/status)
    type: "<systemd|docker|docker-compose|process|custom|none>" # required – Backend type (only one active per service)
    # Use ONLY ONE of the following blocks according to type:
    systemd:
      unit: "<service.service>"              # Name of systemd unit/service (for type: systemd)
    docker:
      image: "<repo/image:tag>"              # Docker image (for type: docker)
      container_name: "<containername>"      # Docker container name
      ports:
        - 3000:3000
      volumes:
        - /opt/<service>:/data
      env:                                   # Environment variables (can use ${VAR_NAME})
        VAR: "VALUE"
      envFile: "/opt/nautipi/<service-id>/.env"         # Path to .env file
    dockerCompose:
      composeFile: "/opt/nautipi/<service-id>/docker-compose.yml" # docker-compose.yml file
      envFile: "/opt/nautipi/<service-id>/.env"                   # Path to .env file
    process:
      name: "<binary>"                       # Name of binary/executable (for type: process)
      args: "<args>"                         # Arguments to pass (can use ${VAR_NAME})
      workingDir: "<path>"                   # Working directory for process
      pidFile: "<path/pidfile>"              # PID file location
    custom_commands:
      - start: "<start-cmd>"                   # Command to start (for type: custom)
        sudo: false
      - stop: "<stop-cmd>"                     # Command to stop
        sudo: false
      - status: "<status-cmd>"                 # Command to check status
        sudo: false
        expect: "<Regex|OK>"

  statusChecks:                              # optional – List of checks to verify service health/status
    - type: "systemd"
      unit: "<service.service>"
    - type: "http"
      url: "http://localhost:3000/status"
      expect: "OK|200"
      timeout: 3
    - type: "tcp"
      host: "localhost"
      port: 3000
    - type: "process"
      name: "<binary>"
    - type: "custom"
      command: "<check-cmd>"
      expect: "<Regex|OK>"

  ports:                                     # optional – Exposed ports for UI or APIs (to check for incompatibilties)
    - port: 3000
      protocol: "http"                       # Protocol (http, tcp, etc.)
      description: "Web UI"                  # Short description
      editable: "true"                       # Editable in the configs (in case of incompatibilties)
      urlPath: "/"                           # Base path (for web UIs)
      tls: false                             # Is TLS/SSL enabled
    - port: 8080
      protocol: "tcp"
      description: "API Endpoint"
      editable: "false"
      interface: "127.0.0.1"

  config:                                    # optional – Configuration files & UI editor schema
    files:
      - path: "/path/to/config.file"   # required – Full path to config file
        format: "yaml|ini|json|xml|env|conf|properties|file" # required – Config format (file - no UI; but file editor)
        reload: "<restart-cmd>|<signal-cmd>|none"            # required – What happens after config edit (default: none)
        description: "Main configuration"    # optional – Description shown in editor
        schema:                              # required – UI form schema for editing config (array)
          - key: "server.port"
            type: integer
            description: "HTTP Port"
            min: 1024
            max: 65535
          - key: "auth.enabled"
            type: boolean
            description: "Enable authentication"
      - path: "/path/to/special-config.file"
        format: "file"
        description: "Sub configuration file"

  actions:                                   # optional – Custom UI buttons for actions/commands
    - name: "Backup"
      command: "/usr/bin/<service>-backup"
      sudo: true                              # true if this action needs root
      confirm: true                           # Show confirmation dialog
      description: "Backup configuration and data"
      icon: "archive"
    - name: "Restart"
      command: "<restart-cmd>"
      sudo: true
      confirm: false
      description: "Restart the service"
      icon: "refresh"

  links:                                     # optional – Useful external/internal links shown in UI
    - title: "Web UI"
      url: "http://localhost:3000/"
      description: "Go to service web interface"
    - title: "API Docs"
      url: "http://localhost:3000/docs"

  dependsOn:                                 # optional – Dependency management for other services/plugins
    required:
      - id: "<service-id>"
        version: ">=1.0.0"
    optional:
      - id: "<service-id>"
        version: ">=0.9.0"
